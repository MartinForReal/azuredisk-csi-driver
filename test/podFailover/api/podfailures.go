/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package podfailure

import (
	"context"
	"time"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/client-go/kubernetes/scheme"
	rest "k8s.io/client-go/rest"
)

type PodFailureInterface interface {
	Create(ctx context.Context, podFailure *PodFailure, opts metav1.CreateOptions) (*PodFailure, error)
	Update(ctx context.Context, podFailure *PodFailure, opts metav1.UpdateOptions) (*PodFailure, error)
	UpdateStatus(ctx context.Context, podFailure *PodFailure, opts metav1.UpdateOptions) (*PodFailure, error)
	Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error
	Get(ctx context.Context, name string, opts metav1.GetOptions) (*PodFailure, error)
	List(ctx context.Context, opts metav1.ListOptions) (*PodFailureList, error)
}

type podFailureClient struct {
	client rest.Interface
	ns     string
}

func (c *podFailureClient) Get(ctx context.Context, name string, options metav1.GetOptions) (*PodFailure, error) {
	result := &PodFailure{}
	err := c.client.Get().
		Namespace(c.ns).
		Resource("podFailures").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return result, err
}

func (c *podFailureClient) List(ctx context.Context, opts metav1.ListOptions) (*PodFailureList, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result := &PodFailureList{}
	err := c.client.Get().
		Namespace(c.ns).
		Resource("podFailures").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do(ctx).
		Into(result)
	return result, err
}

func (c *podFailureClient) Create(ctx context.Context, podFailure *PodFailure, opts metav1.CreateOptions) (*PodFailure, error) {
	result := &PodFailure{}
	err := c.client.Post().
		Namespace(c.ns).
		Resource("podFailures").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(podFailure).
		Do(ctx).
		Into(result)
	return result, err
}

func (c *podFailureClient) Update(ctx context.Context, podFailure *PodFailure, opts metav1.UpdateOptions) (*PodFailure, error) {
	result := &PodFailure{}
	err := c.client.Put().
		Namespace(c.ns).
		Resource("podFailures").
		Name(podFailure.Name).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(podFailure).
		Do(ctx).
		Into(result)
	return result, err
}

func (c *podFailureClient) UpdateStatus(ctx context.Context, podFailure *PodFailure, opts metav1.UpdateOptions) (*PodFailure, error) {
	result := &PodFailure{}
	err := c.client.Put().
		Namespace(c.ns).
		Resource("podFailures").
		Name(podFailure.Name).
		SubResource("status").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(podFailure).
		Do(ctx).
		Into(result)
	return result, err
}

func (c *podFailureClient) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("podFailures").
		Name(name).
		Body(&opts).
		Do(ctx).
		Error()
}
